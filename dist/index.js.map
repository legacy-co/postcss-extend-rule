{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import postcss from 'postcss';\nimport postcssNesting from 'postcss-nesting';\n\nconst nesting = postcssNesting();\n\n// functional selector match\nconst functionalSelectorMatch = /(^|[^\\w-])(%[_a-zA-Z]+[_a-zA-Z0-9-]*)([^\\w-]|$)/i;\n\n// plugin\nexport default postcss.plugin('postcss-extend-rule', rawopts => {\n\t// options ( onFunctionalSelector, onRecursiveExtend, onUnusedExtend)\n\tconst opts = Object(rawopts);\n\tconst extendMatch = opts.name instanceof RegExp\n\t\t? opts.name\n\t: 'name' in opts\n\t\t? new RegExp(`^${opts.name}$`, 'i')\n\t: 'extend';\n\n\treturn (root, result) => {\n\t\tconst extendedAtRules = new WeakMap();\n\t\tconst nestings = [];\n\n\t\t// for each extend at-rule\n\t\troot.walkAtRules(extendMatch, extendAtRule => {\n\t\t\tlet parent = extendAtRule.parent;\n\n\t\t\twhile (parent.parent && parent.parent !== root) {\n\t\t\t\tparent = parent.parent;\n\t\t\t}\n\n\t\t\t// do not revisit visited extend at-rules\n\t\t\tif (!extendedAtRules.has(extendAtRule)) {\n\t\t\t\textendedAtRules.set(extendAtRule, true);\n\n\t\t\t\t// selector identifier\n\t\t\t\tconst selectorIdMatch = getSelectorIdMatch(extendAtRule.params);\n\n\t\t\t\t// extending rules\n\t\t\t\tconst extendingRules = getExtendingRules(selectorIdMatch, extendAtRule);\n\n\t\t\t\t// if there are extending rules\n\t\t\t\tif (extendingRules.length) {\n\t\t\t\t\t// replace the extend at-rule with the extending rules\n\t\t\t\t\textendAtRule.replaceWith(extendingRules);\n\n\t\t\t\t\t// transform any nesting at-rules\n\t\t\t\t\tconst cloneRoot = postcss.root().append(parent.clone());\n\n\t\t\t\t\tnesting(cloneRoot);\n\n\t\t\t\t\tnestings.unshift([parent, cloneRoot]);\n\t\t\t\t} else {\n\t\t\t\t\t// manage unused extend at-rules\n\t\t\t\t\tconst unusedExtendMessage = `Unused extend at-rule \"${extendAtRule.params}\"`;\n\n\t\t\t\t\tif (opts.onUnusedExtend === 'throw') {\n\t\t\t\t\t\tthrow extendAtRule.error(unusedExtendMessage, { word: extendAtRule.name });\n\t\t\t\t\t} else if (opts.onUnusedExtend === 'warn') {\n\t\t\t\t\t\textendAtRule.warn(result, unusedExtendMessage);\n\t\t\t\t\t} else if (opts.onUnusedExtend !== 'ignore') {\n\t\t\t\t\t\textendAtRule.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// manage revisited extend at-rules\n\t\t\t\tconst revisitedExtendMessage = `Revisited extend at-rule \"${extendAtRule.params}\"`;\n\n\t\t\t\tif (opts.onRecursiveExtend === 'throw') {\n\t\t\t\t\tthrow extendAtRule.error(revisitedExtendMessage, { word: extendAtRule.name });\n\t\t\t\t} else if (opts.onRecursiveExtend === 'warn') {\n\t\t\t\t\textendAtRule.warn(result, revisitedExtendMessage);\n\t\t\t\t} else if (opts.onRecursiveExtend !== 'ignore') {\n\t\t\t\t\textendAtRule.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tnestings.forEach(([parent, cloneRoot]) => parent.replaceWith(cloneRoot));\n\n\t\troot.walkRules(functionalSelectorMatch, functionalRule => {\n\t\t\t// manage encountered functional selectors\n\t\t\tconst functionalSelectorMessage = `Encountered functional selector \"${functionalRule.selector}\"`;\n\n\t\t\tif (opts.onFunctionalSelector === 'throw') {\n\t\t\t\tthrow functionalRule.error(functionalSelectorMessage, { word: functionalRule.selector.match(functionalSelectorMatch)[1] });\n\t\t\t} else if (opts.onFunctionalSelector === 'warn') {\n\t\t\t\tfunctionalRule.warn(result, functionalSelectorMessage);\n\t\t\t} else if (opts.onFunctionalSelector !== 'ignore') {\n\t\t\t\tfunctionalRule.remove();\n\t\t\t}\n\t\t});\n\t};\n});\n\nfunction getExtendingRules(selectorIdMatch, extendAtRule) {\n\t// extending rules\n\tconst extendingRules = [];\n\n\t// for each rule found from root of the extend at-rule with a matching selector identifier\n\textendAtRule.root().walkRules(selectorIdMatch, matchingRule => {\n\t\t// nesting selectors for the selectors matching the selector identifier\n\t\tconst nestingSelectors = matchingRule.selectors.filter(\n\t\t\tselector => selectorIdMatch.test(selector)\n\t\t).map(\n\t\t\tselector => selector.replace(selectorIdMatch, '$1&$3')\n\t\t).join(',');\n\n\t\t// matching ruleâ€™s cloned nodes\n\t\tconst nestingNodes = matchingRule.clone().nodes;\n\n\t\t// clone the matching rule as a nested rule\n\t\tlet clone = extendAtRule.clone({\n\t\t\tname: 'nest',\n\t\t\tparams: nestingSelectors,\n\t\t\tnodes: nestingNodes,\n\t\t\t// empty the extending rules, as they are likely non-comforming\n\t\t\traws: {}\n\t\t});\n\n\t\t// preserve nesting of parent rules and at-rules\n\t\tlet parent = matchingRule.parent;\n\n\t\twhile (parent && (parent.type === 'rule' || parent.type === 'atrule')) {\n\t\t\tclone = parent.clone().removeAll().append([ clone ]);\n\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\t// push the matching rule to the extending rules\n\t\textendingRules.push(clone);\n\t});\n\n\t// return the extending rules\n\treturn extendingRules;\n}\n\nfunction getSelectorIdMatch(selectorIds) {\n\t// escape the contents of the selector id to avoid being parsed as regex\n\tconst escapedSelectorIds = postcss.list.comma(selectorIds).map(\n\t\tselectorId => selectorId.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n\t).join('|');\n\n\t// selector unattached to an existing selector\n\tconst selectorIdMatch = new RegExp(`(^|[^\\\\w-]!.!#)(${escapedSelectorIds})([^\\\\w-]|$)`, '');\n\n\treturn selectorIdMatch;\n}\n"],"names":["nesting","postcssNesting","functionalSelectorMatch","postcss","plugin","rawopts","opts","Object","extendMatch","name","RegExp","root","result","extendedAtRules","WeakMap","nestings","walkAtRules","extendAtRule","parent","has","set","selectorIdMatch","getSelectorIdMatch","params","extendingRules","getExtendingRules","length","replaceWith","cloneRoot","append","clone","unshift","unusedExtendMessage","onUnusedExtend","error","word","warn","remove","revisitedExtendMessage","onRecursiveExtend","forEach","walkRules","functionalRule","functionalSelectorMessage","selector","onFunctionalSelector","match","matchingRule","nestingSelectors","selectors","filter","test","map","replace","join","nestingNodes","nodes","raws","type","removeAll","push","selectorIds","escapedSelectorIds","list","comma","selectorId"],"mappings":";;;;;AAGA,MAAMA,OAAO,GAAGC,cAAc,EAA9B;;AAGA,MAAMC,uBAAuB,GAAG,kDAAhC;;AAGA,YAAeC,OAAO,CAACC,MAAR,CAAe,qBAAf,EAAsCC,OAAO,IAAI;AAC/D;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACF,OAAD,CAAnB;AACA,QAAMG,WAAW,GAAGF,IAAI,CAACG,IAAL,YAAqBC,MAArB,GACjBJ,IAAI,CAACG,IADY,GAElB,UAAUH,IAAV,GACC,IAAII,MAAJ,CAAY,IAAGJ,IAAI,CAACG,IAAK,GAAzB,EAA6B,GAA7B,CADD,GAEA,QAJF;AAMA,SAAO,CAACE,IAAD,EAAOC,MAAP,KAAkB;AACxB,UAAMC,eAAe,GAAG,IAAIC,OAAJ,EAAxB;AACA,UAAMC,QAAQ,GAAG,EAAjB,CAFwB;;AAKxBJ,IAAAA,IAAI,CAACK,WAAL,CAAiBR,WAAjB,EAA8BS,YAAY,IAAI;AAC7C,UAAIC,MAAM,GAAGD,YAAY,CAACC,MAA1B;;AAEA,aAAOA,MAAM,CAACA,MAAP,IAAiBA,MAAM,CAACA,MAAP,KAAkBP,IAA1C,EAAgD;AAC/CO,QAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACA,OAL4C;;;AAQ7C,UAAI,CAACL,eAAe,CAACM,GAAhB,CAAoBF,YAApB,CAAL,EAAwC;AACvCJ,QAAAA,eAAe,CAACO,GAAhB,CAAoBH,YAApB,EAAkC,IAAlC,EADuC;;AAIvC,cAAMI,eAAe,GAAGC,kBAAkB,CAACL,YAAY,CAACM,MAAd,CAA1C,CAJuC;;AAOvC,cAAMC,cAAc,GAAGC,iBAAiB,CAACJ,eAAD,EAAkBJ,YAAlB,CAAxC,CAPuC;;AAUvC,YAAIO,cAAc,CAACE,MAAnB,EAA2B;AAC1B;AACAT,UAAAA,YAAY,CAACU,WAAb,CAAyBH,cAAzB,EAF0B;;AAK1B,gBAAMI,SAAS,GAAGzB,OAAO,CAACQ,IAAR,GAAekB,MAAf,CAAsBX,MAAM,CAACY,KAAP,EAAtB,CAAlB;AAEA9B,UAAAA,OAAO,CAAC4B,SAAD,CAAP;AAEAb,UAAAA,QAAQ,CAACgB,OAAT,CAAiB,CAACb,MAAD,EAASU,SAAT,CAAjB;AACA,SAVD,MAUO;AACN;AACA,gBAAMI,mBAAmB,GAAI,0BAAyBf,YAAY,CAACM,MAAO,GAA1E;;AAEA,cAAIjB,IAAI,CAAC2B,cAAL,KAAwB,OAA5B,EAAqC;AACpC,kBAAMhB,YAAY,CAACiB,KAAb,CAAmBF,mBAAnB,EAAwC;AAAEG,cAAAA,IAAI,EAAElB,YAAY,CAACR;AAArB,aAAxC,CAAN;AACA,WAFD,MAEO,IAAIH,IAAI,CAAC2B,cAAL,KAAwB,MAA5B,EAAoC;AAC1ChB,YAAAA,YAAY,CAACmB,IAAb,CAAkBxB,MAAlB,EAA0BoB,mBAA1B;AACA,WAFM,MAEA,IAAI1B,IAAI,CAAC2B,cAAL,KAAwB,QAA5B,EAAsC;AAC5ChB,YAAAA,YAAY,CAACoB,MAAb;AACA;AACD;AACD,OAhCD,MAgCO;AACN;AACA,cAAMC,sBAAsB,GAAI,6BAA4BrB,YAAY,CAACM,MAAO,GAAhF;;AAEA,YAAIjB,IAAI,CAACiC,iBAAL,KAA2B,OAA/B,EAAwC;AACvC,gBAAMtB,YAAY,CAACiB,KAAb,CAAmBI,sBAAnB,EAA2C;AAAEH,YAAAA,IAAI,EAAElB,YAAY,CAACR;AAArB,WAA3C,CAAN;AACA,SAFD,MAEO,IAAIH,IAAI,CAACiC,iBAAL,KAA2B,MAA/B,EAAuC;AAC7CtB,UAAAA,YAAY,CAACmB,IAAb,CAAkBxB,MAAlB,EAA0B0B,sBAA1B;AACA,SAFM,MAEA,IAAIhC,IAAI,CAACiC,iBAAL,KAA2B,QAA/B,EAAyC;AAC/CtB,UAAAA,YAAY,CAACoB,MAAb;AACA;AACD;AACD,KApDD;AAsDAtB,IAAAA,QAAQ,CAACyB,OAAT,CAAiB,CAAC,CAACtB,MAAD,EAASU,SAAT,CAAD,KAAyBV,MAAM,CAACS,WAAP,CAAmBC,SAAnB,CAA1C;AAEAjB,IAAAA,IAAI,CAAC8B,SAAL,CAAevC,uBAAf,EAAwCwC,cAAc,IAAI;AACzD;AACA,YAAMC,yBAAyB,GAAI,oCAAmCD,cAAc,CAACE,QAAS,GAA9F;;AAEA,UAAItC,IAAI,CAACuC,oBAAL,KAA8B,OAAlC,EAA2C;AAC1C,cAAMH,cAAc,CAACR,KAAf,CAAqBS,yBAArB,EAAgD;AAAER,UAAAA,IAAI,EAAEO,cAAc,CAACE,QAAf,CAAwBE,KAAxB,CAA8B5C,uBAA9B,EAAuD,CAAvD;AAAR,SAAhD,CAAN;AACA,OAFD,MAEO,IAAII,IAAI,CAACuC,oBAAL,KAA8B,MAAlC,EAA0C;AAChDH,QAAAA,cAAc,CAACN,IAAf,CAAoBxB,MAApB,EAA4B+B,yBAA5B;AACA,OAFM,MAEA,IAAIrC,IAAI,CAACuC,oBAAL,KAA8B,QAAlC,EAA4C;AAClDH,QAAAA,cAAc,CAACL,MAAf;AACA;AACD,KAXD;AAYA,GAzED;AA0EA,CAnFc,CAAf;;AAqFA,SAASZ,iBAAT,CAA2BJ,eAA3B,EAA4CJ,YAA5C,EAA0D;AACzD;AACA,QAAMO,cAAc,GAAG,EAAvB,CAFyD;;AAKzDP,EAAAA,YAAY,CAACN,IAAb,GAAoB8B,SAApB,CAA8BpB,eAA9B,EAA+C0B,YAAY,IAAI;AAC9D;AACA,UAAMC,gBAAgB,GAAGD,YAAY,CAACE,SAAb,CAAuBC,MAAvB,CACxBN,QAAQ,IAAIvB,eAAe,CAAC8B,IAAhB,CAAqBP,QAArB,CADY,EAEvBQ,GAFuB,CAGxBR,QAAQ,IAAIA,QAAQ,CAACS,OAAT,CAAiBhC,eAAjB,EAAkC,OAAlC,CAHY,EAIvBiC,IAJuB,CAIlB,GAJkB,CAAzB,CAF8D;;AAS9D,UAAMC,YAAY,GAAGR,YAAY,CAACjB,KAAb,GAAqB0B,KAA1C,CAT8D;;AAY9D,QAAI1B,KAAK,GAAGb,YAAY,CAACa,KAAb,CAAmB;AAC9BrB,MAAAA,IAAI,EAAE,MADwB;AAE9Bc,MAAAA,MAAM,EAAEyB,gBAFsB;AAG9BQ,MAAAA,KAAK,EAAED,YAHuB;AAI9B;AACAE,MAAAA,IAAI,EAAE;AALwB,KAAnB,CAAZ,CAZ8D;;AAqB9D,QAAIvC,MAAM,GAAG6B,YAAY,CAAC7B,MAA1B;;AAEA,WAAOA,MAAM,KAAKA,MAAM,CAACwC,IAAP,KAAgB,MAAhB,IAA0BxC,MAAM,CAACwC,IAAP,KAAgB,QAA/C,CAAb,EAAuE;AACtE5B,MAAAA,KAAK,GAAGZ,MAAM,CAACY,KAAP,GAAe6B,SAAf,GAA2B9B,MAA3B,CAAkC,CAAEC,KAAF,CAAlC,CAAR;AAEAZ,MAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACA,KA3B6D;;;AA8B9DM,IAAAA,cAAc,CAACoC,IAAf,CAAoB9B,KAApB;AACA,GA/BD,EALyD;;AAuCzD,SAAON,cAAP;AACA;;AAED,SAASF,kBAAT,CAA4BuC,WAA5B,EAAyC;AACxC;AACA,QAAMC,kBAAkB,GAAG3D,OAAO,CAAC4D,IAAR,CAAaC,KAAb,CAAmBH,WAAnB,EAAgCT,GAAhC,CAC1Ba,UAAU,IAAIA,UAAU,CAACZ,OAAX,CAAmB,qBAAnB,EAA0C,MAA1C,CADY,EAEzBC,IAFyB,CAEpB,GAFoB,CAA3B,CAFwC;;AAOxC,QAAMjC,eAAe,GAAG,IAAIX,MAAJ,CAAY,mBAAkBoD,kBAAmB,cAAjD,EAAgE,EAAhE,CAAxB;AAEA,SAAOzC,eAAP;AACA;;;;"}